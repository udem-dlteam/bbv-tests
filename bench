#!/bin/sh

# usage:
#
#  For gambit:
#
#    ./bench -g fib
#    ./bench -g -P fib   # add branch counts to CFG
#    ./bench -g -G -S -V 0 -V 5 -I 0 -I 370 fib fibfp tak takl
#    ./bench -g
#
#  For bigloo:
#
#    ./bench -b fib
#    ./bench -b -G -S -V 0 -V 5 fib fibfp tak takl
#    ./bench -b

DEFAULT_SC="gambit bigloo"
DEFAULT_SG="S G"
DEFAULT_V="0 5"
DEFAULT_I="0"
DEFAULT_PROGRAMS="ack fib fibfp tak takl diviter divrec array1 browse mazefun nqueens puzzle quicksort sum sumfp triangl almabench"

#debug=true
debug=false

compile=true
#compile=false

execute=true
#execute=false

plot=true
#plot=false

withC=false

# find script directory
SCRIPT_DIR="$0"
if test "${SCRIPT_DIR#/}" = "$SCRIPT_DIR" ; then
  SCRIPT_DIR="$(pwd)/$SCRIPT_DIR"
fi
SCRIPT_DIR="${SCRIPT_DIR%/*}"
SCRIPT_DIR="${SCRIPT_DIR%/.}"

SC=""
SG=""
PROGRAMS=""
V=""
I=""
PRIMITIVE_COUNT=""
RUNS="1"
DRY_RUNS="1"

while [ "$#" != "0" ]; do
  case "$1" in
    -g|--gambit) # system
      SC="$SC gambit"
      ;;
    -b|--bigloo) # system
      SC="$SC bigloo"
      ;;
    -G) # generic arithmetic
      SG="$SG G"
      ;;
    -S) # specialized arithmetic when fixnum/flonum operations are possible
      SG="$SG S"
      ;;
    -V) # version limit
      shift
      if [ "$#" = "0" ]; then
        printf "version limit (-V) option needs an argument"
        exit 1
      fi
      V="$V $1"
      ;;
    -I) # inlining limit
      shift
      if [ "$#" = "0" ]; then
        printf "inlining limit (-I) option needs an argument"
        exit 1
      fi
      I="$I $1"
      ;;
    -P) # primitive counts
      PRIMITIVE_COUNT="-P"
      ;;
    -runs) # number of runs
      shift
      if [ "$#" = "0" ]; then
        printf "number of runs (-runs) option needs an argument"
        exit 1
      fi
      RUNS="$1"
      ;;
    -dry-runs) # number of dry runs
      shift
      if [ "$#" = "0" ]; then
        printf "number of dry runs (-dry-runs) option needs an argument"
        exit 1
      fi
      DRY_RUNS="$1"
      ;;
    -withC) # run C benchmarks
      withC=true
      ;;
    -nocompile) # don't compile benchmarks
      compile=false
      ;;
    -noexecute) # don't execute benchmarks
      execute=false
      ;;
    -noplot) # don't plot results
      plot=false
      ;;
    -*) # other options
      printf "*** unknown option: $1\n"
      exit 1
      ;;
    *)
      PROGRAMS="$PROGRAMS $1"
      ;;
  esac
  shift
done

if [ "$SC" = "" ] ; then
  SC="$DEFAULT_SC"
fi

if [ "$SG" = "" ] ; then
  SG="$DEFAULT_SG"
fi

if [ "$V" = "" ] ; then
  V="$DEFAULT_V"
fi

if [ "$I" = "" ] ; then
  I="$DEFAULT_I"
fi

if [ "$PROGRAMS" = "" ] ; then
  PROGRAMS="$DEFAULT_PROGRAMS"
fi

SC_range="$SC"
SG_range="$SG"
V_range="$V"
I_range="$I"

CC_range="gcc clang"
O_range="0 1 2 3"

if $debug ; then

  # for quick testing

  gambit_V_range="5"
  gambit_I_range="0"

  bigloo_V_range="5"
  bigloo_I_range="0"

  CC_range=""
  O_range="1"

fi

#if [ "$WIPGAMBITDIR" = "" ] ; then
#  export WIPGAMBITDIR=`pwd`/gambit/gambit
#fi

if [ `uname -s` = "Darwin" ] ; then
  TIME=time
  TIMEARGS=
  GCC=gcc-13
  PROCESSOR_MODEL=`system_profiler SPHardwareDataType | fgrep Chip: | sed -e "s,.*Chip: ,," -e "s, ,-,g"`
  PROCESSOR_MODEL="Apple-M2-Max"
else
  TIME=/usr/bin/time
  TIMEARGS="-f real:%e"
  GCC=gcc
  PROCESSOR_MODEL=`fgrep "model name" /proc/cpuinfo | sed -e "s,model name[^:]*: ,," -e "s,([^)]*),,g" -e "s, ,-,g" | head -1`
fi

create_gnuplot()
{
    cat <<EOF > $1
set terminal pdf font 'Verdana,12'
set ylabel 'execution time (in sec)' offset 0,0

set auto x

set style data histogram
set style histogram gap 0 errorbars lw 1
set errorbars lc rgb '#444444'
set xtics rotate by 45 right font ',8'
set boxwidth 0.9
set style fill solid
set style line 11 linecolor rgb '#0d52bd' linetype 1 linewidth 1
set style line 12 linecolor rgb '#37fd12' linetype 1 linewidth 1
set style line 13 linecolor rgb '#57a0d3' linetype 1 linewidth 1
set style line 14 linecolor rgb '#4fc978' linetype 1 linewidth 1
set style line 51 linecolor rgb '#efcbab' linetype 1 linewidth 1
set style line 61 linecolor rgb '#821831' linetype 1 linewidth 1

set style line 100 linecolor rgb '#000000' linetype 1 linewidth 1

set grid ytics
set xtics scale 0

set key top rm
set ylabel 'execution time (in sec)'

set yrange [0:]

unset xtic
EOF
}

color_gambit=10
color_bigloo=20
color_gcc=50
color_clang=60

for program in $PROGRAMS ; do

  case "$program" in

       ack) bench=recursive/ack ; args="m: 3 n: 9" ; repeat=50 ;;
       fib) bench=recursive/fib ; args="n: 39" ; repeat=5 ;;
     fibfp) bench=recursive/fibfp ; args="n: 39.0" ; repeat=2 ;;
       tak) bench=recursive/tak ; args="x: 18 y: 12 z: 6" ; repeat=10000 ;;
      takl) bench=recursive/takl ; args="x: 18 y: 12 z: 6" ; repeat=2000 ;;
   diviter) bench=recursive/diviter ; args="" ; repeat=2000000 ;;
    divrec) bench=recursive/divrec ; args="" ; repeat=2000000 ;;
    array1) bench=recursive/array1 ; args="n: 200000" ; repeat=5 ;;
    browse) bench=gabriel/browse ; args="" ; repeat=2000 ;;
   mazefun) bench=gabriel/mazefun ; args="n: 11 m: 11" ; repeat=5000 ;;
   nqueens) bench=gabriel/nqueens ; args="n: 13" ; repeat=2 ;;
    puzzle) bench=gabriel/puzzle ; args="n: 511" ; repeat=500 ;;
 quicksort) bench=gabriel/quicksort ; args="" ; repeat=1000 ;;
       sum) bench=gabriel/sum ; args="n: 10000" ; repeat=200000 ;;
     sumfp) bench=gabriel/sumfp ; args="n: 1e6" ; repeat=500 ;;
   triangl) bench=gabriel/triangl ; args="i: 22 depth: 1" ; repeat=50 ;;
 almabench) bench=bglstone/almabench ; args="K: 36525" ; repeat=1 ;;

  esac

  bench="tests/$bench"

  if $compile ; then

    if test -e $bench.scm ; then
      for SC in $SC_range ; do
        for I in $I_range ; do
          for SG in $SG_range ; do
            for V in $V_range ; do
              $SCRIPT_DIR/compile --$SC -I $I -$SG -V $V $PRIMITIVE_COUNT $bench.scm
            done
          done
        done
      done
    fi

    if $withC ; then
      if test -e $bench.c.c ; then
        for CC in $CC_range ; do
          if [ "$CC" = "gcc" ] ; then
            ACTUAL_CC="$GCC"
          else
            ACTUAL_CC="$CC"
          fi
          for O in $O_range ; do
            $ACTUAL_CC -fomit-frame-pointer -O$O $bench.c.c -o $bench.$CC.O$O.exe
          done
        done
      fi
    fi

  fi

  if $execute ; then

    if test -e $bench.scm ; then
      for SC in $SC_range ; do
        for I in $I_range ; do
          for SG in $SG_range ; do
            csv_file="$bench.$SC.$I$SG.csv"
            rm -f "$csv_file"
            for V in $V_range ; do
              printf "$V" >> $csv_file
              run=0
              while [ "$run" -lt "$DRY_RUNS" ] ; do
                run=$((run+1))
                real_time=`(eval $TIME $TIMEARGS $bench.$SC.$I$SG$V.exe repeat: $repeat $args) 2>&1 | fgrep real | sed -e 's/^[^0-9]*//' -e 's/^0m//' -e 's/ *//' -e 's/[s ].*//'`
              done
              run=0
              while [ "$run" -lt "$RUNS" ] ; do
                run=$((run+1))
                real_time=`(eval $TIME $TIMEARGS $bench.$SC.$I$SG$V.exe repeat: $repeat $args) 2>&1 | fgrep real | sed -e 's/^[^0-9]*//' -e 's/^0m//' -e 's/ *//' -e 's/[s ].*//'`
                printf ",%s" $real_time >> $csv_file
              done
              printf "\n" >> $csv_file
            done
          done
        done
      done
    fi

    if $withC ; then
      if test -e $bench.c.c ; then
        for CC in $CC_range ; do
          csv_file="$bench.$CC.csv"
          rm -f "$csv_file"
          for O in $O_range ; do
            printf "O$O" >> $csv_file
            run=0
            while [ "$run" -lt "$DRY_RUNS" ] ; do
              run=$((run+1))
              real_time=`(eval $TIME $TIMEARGS $bench.$CC.O$O.exe repeat: $repeat $args) 2>&1 | fgrep real | fgrep real | sed -e 's/^[^0-9]*//' -e 's/^0m//' -e 's/ *//' -e 's/[s ].*//'`
            done
            run=0
            while [ "$run" -lt "$RUNS" ] ; do
              run=$((run+1))
              real_time=`(eval $TIME $TIMEARGS $bench.$CC.O$O.exe repeat: $repeat $args) 2>&1 | fgrep real | sed -e 's/^[^0-9]*//' -e 's/^0m//' -e 's/ *//' -e 's/[s ].*//'`
              printf ",%s" $real_time >> $csv_file
            done
            printf "\n" >> $csv_file
          done
        done
      fi
    fi

  fi

  if $plot ; then

    COMPUTE_STATS="awk -F',' '{ N=NF-1; sum=0; for (i=2; i<=N+1; i++) sum+=\$i; mean=sum/N; sumsq=0; for (i=2; i<=N+1; i++) sumsq+=(\$i-mean)*(\$i-mean); print \$1,mean,sqrt(sumsq/N) }'"
    gnuplot_file="$program.gnuplot"
    pdf_file="$program.$PROCESSOR_MODEL.pdf"
    rm -f "$gnuplot_file"

    create_gnuplot "$gnuplot_file"

    printf "set output '$pdf_file'\n" >> "$gnuplot_file"
    printf "set title '$program on $PROCESSOR_MODEL'\n" >> "$gnuplot_file"
    printf "%s\n" "plot \\" >> "$gnuplot_file"

    if test -e $bench.scm ; then
      for SC in $SC_range ; do
        eval color=\$color_$SC
        for I in $I_range ; do
          for SG in $SG_range ; do
            color=$((color+1))
            csv_file="$bench.$SC.$I$SG.csv"

            printf "newhistogram lt 1, \\\\\n" >> "$gnuplot_file"
            printf "\"< $COMPUTE_STATS %s\" u 2:3 title '%s' ls %s , \\\\\n" "$csv_file" "$SC.$I$SG" "$color" >> "$gnuplot_file"

          done
        done
      done
      if $withC ; then
        if test -e $bench.c.c ; then
          for CC in $CC_range ; do
            eval color=\$color_$CC
            color=$((color+1))
            csv_file="$bench.$CC.csv"

            printf "newhistogram lt 1, \\\\\n" >> "$gnuplot_file"
            printf "\"< $COMPUTE_STATS %s\" u 2:3 title '%s' ls %s , \\\\\n" "$csv_file" "$CC" "$color" >> "$gnuplot_file"

          done
        fi
      fi

    fi

    gnuplot "$gnuplot_file"

    printf "%s\n" "created $pdf_file"

    if [ `uname -s` = "Darwin" ] ; then
      open "$pdf_file"
    fi

  fi

done
