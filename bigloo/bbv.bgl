;; bigloo -O3 -saw -fsaw-bbv -fsaw-bbv-fun bbv -t1 bbv.bgl bbv.scm
;; BIGLOOTRACE="bbv-ins" bigloo.new -O3 -saw -fsaw-bbv -fsaw-bbv-fun bbv -t1 bbv.bgl bbv.scm 
;; bglcfg 'bbv-bbv.bbv.cfg' > 'bbv-bbv.bbv.dot' && dot 'bbv-bbv.bbv.dot' -Tpdf > bbv-bbv.bbv.pdf

(module bbv
   (include "./bbv.sch")
   (main main))

(define _LOG_ 0)

(define-expander log
   (lambda (x e)
      (e `(begin
	     ;(set! _LOG_ (+fx _LOG_ 1))
	     '(tprint _LOG_ ": " ,@(cdr x))
	     #unspecified)
	 e)))

(define (main args)
   (let ((c (cdr args)))
      (let loop ((cmdargs (map (lambda (s) (call-with-input-string s read)) c))
		 (runargs '())
		 (repeat 1)
		 (align-stack 0)
		 (docheck #t))
	 (cond
	    ((null? cmdargs)
	     (let loop ((repeat repeat)
			(res #f))
		(define (deep-apply align-stack run args)
		   (if (> align-stack 0)
		       (unknown (deep-apply (- align-stack 1) run args))
		       (if (pair? args) (apply run args) (run))))
		(if (>fx repeat 0)
		    (loop (-fx repeat 1) (deep-apply align-stack run runargs))
		    (if docheck
			(if (not (check res))
			    (error "check" "check failed" #f))))))
	    ((eq? (car cmdargs) :repeat)
	     (if (and (pair? (cdr cmdargs)) (integer? (cadr cmdargs)) (>fx (cadr cmdargs) 0))
		 (loop '() (append runargs (cddr cmdargs)) (cadr cmdargs) align-stack docheck)
		 (error "bbv.bgl" "wrong :repeat value" (cdr cmdargs))))
	    ((eq? (car cmdargs) :check)
	     (loop (cddr cmdargs) runargs repeat align-stack (cadr cmdargs)))
	    ((eq? (car cmdargs) :align-stack)
	     (loop (cddr cmdargs) runargs repeat (cadr cmdargs) docheck))
	    ((null? (cdr cmdargs))
	     (error "bbv.bgl" "wrong argument" (car cmdargs)))
	    (else
	     (loop (cddr cmdargs) (append runargs (list (car cmdargs) (cadr cmdargs))) repeat align-stack docheck))))))
