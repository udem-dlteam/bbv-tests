#!/bin/sh

# usage:
#
#  For gambit:
#
#    ./compile --gambit --view tests/recursive/fib.scm
#    time ./tests/recursive/fib.gambit.0G4.exe
#
#  For bigloo:
#
#    ./compile --bigloo --view tests/recursive/fib.scm
#    time ./tests/recursive/fib.bigloo.0G4.exe


# find script directory
SCRIPT_DIR="$0"
if test "${SCRIPT_DIR#/}" = "$SCRIPT_DIR" ; then
  SCRIPT_DIR="$(pwd)/$SCRIPT_DIR"
fi
SCRIPT_DIR="${SCRIPT_DIR%/*}"
SCRIPT_DIR="${SCRIPT_DIR%/.}"


# default settings:

SYSTEM=gambit
VIEW=no
TESTS=""          # empty to compile all tests in tests directory

OPTIMIZE_BEFORE=0
ARITHMETIC=G      # generic (G) or specialized (S) arithmetic?
VERSION_LIMIT=4   # version limit (0 to disable BBV)
INLINING_LIMIT=0  # 0 for no function inlining
PRIMITIVE_COUNT=0 # enables primitive (0 to disable)
GENERATE_CFG=0    # enable cfg generation
MERGE_STRATEGY="linear" # default merge strategy

# for gambit
if test "$GAMBITDIR" = "" ; then
  GAMBITDIR="$SCRIPT_DIR/gambit/gambit"
fi

GAMBITCOMP="$GAMBITDIR/gsc/gsc -:=$GAMBITDIR"

# for bigloo
if [ "$BIGLOODIR " = " " ]; then
  BIGLOODIR="$SCRIPT_DIR/bigloo/local"
fi  
BIGLOOCOMP="$BIGLOODIR/bin/bigloo"
BGLCFG="$BIGLOODIR/bin/bglcfg"

while [ "$#" != "0" ]; do
  case "$1" in
    -g|--gambit) # system
      SYSTEM=gambit
      ;;
    -b|--bigloo) # system
      SYSTEM=bigloo
      ;;
    -G) # generic arithmetic
      ARITHMETIC=G
      ;;
    -S) # specialized arithmetic when fixnum/flonum operations are possible
      ARITHMETIC=S
      ;;
    -V) # version limit
      shift
      if [ "$#" = "0" ]; then
        printf "version limit (-V) option needs an argument"
        exit 1
      fi
      VERSION_LIMIT="$1"
      ;;
    -gsi)
     GAMBITCOMP="$GAMBITDIR/gsi/gsi -:d,=$GAMBITDIR $GAMBITDIR/gsc/igsc"
     ;;
    -M) # merge strategy
      shift
      if [ "$#" = "0" ]; then
        printf "merge strategy (-M) option needs an argument"
        exit 1
      fi
      MERGE_STRATEGY="$1"
      ;;
    -I) # inlining limit
      shift
      if [ "$#" = "0" ]; then
        printf "inlining limit (-I) option needs an argument"
        exit 1
      fi
      INLINING_LIMIT="$1"
      ;;
    -O) # optimize before
      OPTIMIZE_BEFORE=1
      ;;
    -P) # primitive counts
      PRIMITIVE_COUNT=1
      ;;
    -CFG) # primitive counts
      GENERATE_CFG=1
      ;;
    -X) # output the code with bbv inbclusions
      OUTPUT_INCLUDED_CODE=1
      ;;
    -c|--clean) # clean
      rm -f tests/*/*.cfg tests/*/*.cfg.pdf tests/*/*.gvm tests/*/*.o* tests/*/*~ tests/*/*.bbv.dot tests/*/*.exe
      exit
      ;;
    -v|--view) # view CFG
      VIEW=yes
      ;;
    -*) # other options
      printf "*** unknown option: $1\n"
      exit 1
      ;;
    *)
      TESTS="$TESTS $1"
      ;;
  esac
  shift
done

run_dot()
{
  if command -v dot > /dev/null 2>&1 ; then
    dot -O -Tpdf $1
  else
    printf "dot program not found!\n"
  fi
}

run_pdfviewer()
{
  if command -v okular > /dev/null 2>&1 ; then
    okular $1
  else
    if command -v open > /dev/null 2>&1 ; then
      open $1
    else
      printf "PDF viewer program not found!\n"
    fi
  fi
}

if test "$TESTS" = "" ; then
  TESTS="tests"
fi

FILES=""

add_file()
{
  file="$1"
  if test "${file#*.scm}" != "$file" -a "${file#*.gambit.scm}" = "$file" -a "${file#*.bigloo.scm}" = "$file" ; then
    if test "${file#/}" = "$file" ; then
      file="$(pwd)/$file"
    fi
    FILES="$FILES $file"
  fi
}

for test in $TESTS ; do
  if test -d $test ; then
    for file in $(find $test -name "*.scm") ; do
      add_file "$file"
    done
  else
    add_file "$test"
  fi
done

for file in $FILES ; do

  filenoext="${file%.scm}"

  printf "=========== $SYSTEM ${file}\n"

  case "$SYSTEM" in

    gambit)
      DECL_OPTIM=""
      if [ "$OPTIMIZE_BEFORE" = "0" ]; then
        DECL_OPTIM="(not constant-fold)"
      fi
      DECL="(declare $DECL_OPTIM (version-limit $VERSION_LIMIT) (inlining-limit $INLINING_LIMIT)) (define-macro (%%%) (eval '(define arithmetic '$ARITHMETIC))) (%%%) (define-macro (npnull? x) (quasiquote (let ((x ,x)) (and (not (##pair? x)) (##null? x)))))"
      base="$filenoext.gambit.$INLINING_LIMIT$ARITHMETIC$MERGE_STRATEGY$VERSION_LIMIT"
      exe=$base.exe
      echo "$OUTPUT_INCLUDED_CODE"
      if [ "$OUTPUT_INCLUDED_CODE" = "1" ]; then
        inclusions=$base.code.scm;
        echo "$DECL" > $inclusions;
        cat $SCRIPT_DIR/gambit/bbv.scm $file >> $inclusions;
        echo "(run)" >> $inclusions;
      fi
      if [ "$PRIMITIVE_COUNT" = "1" ]; then
        echo $GAMBITCOMP -prelude "$DECL (##include \"$SCRIPT_DIR/gambit/bbv.scm\")" -postlude "(run)" -gvm-interpret -bbv-merge-strategy "$MERGE_STRATEGY" $file
        $GAMBITCOMP -prelude "$DECL (##include \"$SCRIPT_DIR/gambit/bbv.scm\")" -postlude "(run)" -gvm-interpret -bbv-merge-strategy "$MERGE_STRATEGY" $file
      fi
      CFG_FLAG=""
      if [ "$GENERATE_CFG" = "1" ]; then
        CFG_FLAG="-cfg"
      fi
      echo $cmd "$GAMBITCOMP -prelude \"$DECL (##include \"$SCRIPT_DIR/gambit/bbv.scm\")\" -postlude \"(##include \"$SCRIPT_DIR/gambit/main.scm\")\" -keep-temp -gvm $CFG_FLAG $PRIM_FLAG -bbv-merge-strategy \"$MERGE_STRATEGY\" -exe -o $exe $file"
      $GAMBITCOMP -prelude "$DECL (##include \"$SCRIPT_DIR/gambit/bbv.scm\")" -postlude "(##include \"$SCRIPT_DIR/gambit/main.scm\")" -keep-temp -gvm $CFG_FLAG $PRIM_FLAG -bbv-merge-strategy "$MERGE_STRATEGY" -exe -o $exe $file
      if [ "$GENERATE_CFG" = "1" ]; then
        mv $filenoext.cfg $base.cfg
        run_dot $base.cfg
        CFGPDF=$base.cfg.pdf
      fi
      ANALYSISEXT=.gvm
      ;;

    bigloo)
      base="$filenoext.bigloo.$INLINING_LIMIT$ARITHMETIC$MERGE_STRATEGY$VERSION_LIMIT"
      exe=$base.exe
      PATH="$BIGLOODIR/bin:$PATH"
      BIGLOOBBVSTRATEGY="$MERGE_STRATEGY"
      if [ "$OPTIMIZE_BEFORE" = "0" ]; then
        BIGLOOOPT="$BIGLOOOPT -O -fno-user-inlining"
      else
        BIGLOOOPT="$BIGLOOOPT -Obench"
      fi
      #if [ "$INLINING_LIMIT " = "0 " ]; then
	    #  BIGLOOOPT="$BIGLOOOPT -fno-user-inlining"
      #fi
      if [ "$PRIMITIVE_COUNT" = "1" ]; then
        BIGLOOOPT="$BIGLOOOPT -copt -DSAW_BBV_STATS=1"
      fi
      echo "cd $SCRIPT_DIR/bigloo; BIGLOOBBVVERSIONLIMIT=$VERSION_LIMIT $BIGLOOCOMP $BIGLOOOPT -srfi arithmetic$ARITHMETIC bbv.bgl $file -w -unsafe -saw -fsaw-bbv -o $exe"
      (cd $SCRIPT_DIR/bigloo && \
	 BIGLOOBBVVERSIONLIMIT=$VERSION_LIMIT $BIGLOOCOMP $BIGLOOOPT -srfi arithmetic$ARITHMETIC bbv.bgl $file -w -unsafe -saw -fsaw-bbv -o $exe)

      if [ -f $base-program.bbv.cfg ]; then
        (cd $SCRIPT_DIR/bigloo && \
	   $BGLCFG $base-program.bbv.cfg > $base.dot && \
	   run_dot $base-program.bbv.dot)
	CFGPDF=$base-program.bbv.dot.pdf
	ANALYSISEXT=-program.bbv.cfg
      fi
      ;;

  esac

  echo "***executable: $exe"

  if test "$ANALYSISEXT" != "" && fgrep ";; $ANALYSISEXT contains: " $file > /dev/null 2>&1 ; then

    fgrep ";; $ANALYSISEXT contains: " $file | sed -e "s/^;; $ANALYSISEXT contains: //" | while IFS= read -r pattern ; do

      nboccur=$(grep -e "$pattern" $base$ANALYSISEXT | wc -l | sed -e "s/^ *//")

      case "$nboccur" in
        1) printf "SUCCESS -- $base$ANALYSISEXT contains: $pattern\n"
           ;;
        0) printf "FAIL -- pattern not found in $base$ANALYSISEXT: $pattern\n"
           ;;
        *) printf "FAIL -- pattern found $nboccur times in $base$ANALYSISEXT: $pattern\n"
           ;;
      esac

    done

  fi

  if test "$VIEW" = "yes" ; then
    run_pdfviewer $CFGPDF
  fi

done
