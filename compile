#!/bin/bash

# usage: see ./compile -h

set -euo pipefail

# find script directory
SCRIPT_DIR="$0"
if [ "${SCRIPT_DIR#/}" = "$SCRIPT_DIR" ]; then
  SCRIPT_DIR="$(pwd)/$SCRIPT_DIR"
fi
SCRIPT_DIR="${SCRIPT_DIR%/*}"
SCRIPT_DIR="${SCRIPT_DIR%/.}"

# Default parameters
OPTIM_LEVEL=0     # optimization level
SAFE_ARITHMETIC=1 # safe/unsafe arithmetic
PRIMITIVE_COUNT=0 # enables primitive (0 to disable)
GENERATE_CFG=0    # enable cfg generation
VIEW_CFG=0        # open cfg in pdf viewer
USE_IGSC=0        # use gambit igsc instead of gsc
COMPILER_DIR=     # compiler directory
VERSION_LIMIT=    # version limit
SYSTEM=           # system (gambit or bigloo)

# Parse parameters
while getopts "f:S:D:V:O:UPGWIchv" opt; do
  case $opt in
    f)
      INPUT_FILE=$(readlink -f $OPTARG)
      ;;
    S)
      case $OPTARG in
        'gambit'|'bigloo')
          SYSTEM=$OPTARG
          ;;
        *)
          echo "Unknown system: $OPTARG" >&2
          exit 1
          ;;
      esac
      ;;
    D)
      COMPILER_DIR=$OPTARG
      ;;
    V)
      if ! [ "$OPTARG" -eq "$OPTARG" ] 2> /dev/null; then
          echo "Version limit must be an integer not '$OPTARG'"
          exit 1
      fi
      VERSION_LIMIT=$OPTARG
      ;;
    O)
      case $OPTARG in
        1|2|3)
          OPTIM_LEVEL=$OPTARG
          ;;
        *)
          echo "Invalid optimization level: -O$OPTARG" >&2
          exit 1
          ;;
      esac
      ;;
    U)
      SAFE_ARITHMETIC=0
      ;;
    P)
      PRIMITIVE_COUNT=1
      ;;
    G)
      GENERATE_CFG=1
      ;;
    W)
      GENERATE_CFG=1
      VIEW_CFG=1
      ;;
    I)
      USE_IGSC=1
      ;;
    c)
      rm -f tests/*/*.cfg tests/*/*.cfg.pdf tests/*/*.gvm tests/*/*.o* tests/*/*~ tests/*/*.bbv.dot tests/*/*.exe
      exit 0
      ;;
    v)
      set -x
      ;;
    h)
      echo "Usage: $0 [options]"
      echo "Options:"
      echo "  -f <filename>     File to compile"
      echo "  -S <system>       Specify the system ('gambit' or 'bigloo')"
      echo "  -D <dir>          Specify compiler directory"
      echo "  -V <limit>        Set the version limit"
      echo "  -O <level>        Set optimization level (1, 2, 3)"
      echo "  -U                Use unsafe arithmetic"
      echo "  -P                Count primitive usage"
      echo "  -G                Generate CFG"
      echo "  -W                View CFG in pdf viewer"
      echo "  -I                Use igsc (gambit only)"
      echo "  -c                Clean up tests"
      echo "  -h                Display this help and exit"
      echo "  -v                Execute this script in verbose mode"
      exit 0
      ;;
    \?)
      exit 1
      ;;
  esac
done

# Check valid arguments
if [ "$INPUT_FILE" = "" ]; then
  echo "*** no file provided: use -f <filename>" >&2
  exit 1
fi

if [[ "${INPUT_FILE##*.}" != "scm" ]]; then
    echo "** provided file must be a .scm file, not '$INPUT_FILE'"
    exit 1
fi

if [ "$SYSTEM" = "" ]; then
  echo "*** no system provided: use -S <system>" >&2
  exit 1
fi

if [ "$VERSION_LIMIT" = "" ]; then
  echo "*** no version limit provided: use -V <limit>" >&2
  exit 1
fi

if [ "$USE_IGSC" = "1" ] && [ "$SYSTEM" != "gambit" ]; then
  echo "*** igsc only available with '-S gambit'" >&2
  exit 1
fi

# Set default value that depend on other options
if [ "$COMPILER_DIR" = "" ]; then
  if [ "$SYSTEM" = "bigloo" ]; then
    COMPILER_DIR="$SCRIPT_DIR/bigloo/local"
  elif [ "$SYSTEM" = "gambit" ]; then
    COMPILER_DIR="$SCRIPT_DIR/gambit/bbv-gambit"
  fi
fi

if [ "$SAFE_ARITHMETIC" = "0" ]; then
  ARITHMETIC=S
  SAFETY_MODE="unsafe"
else
  ARITHMETIC=G
  SAFETY_MODE="safe"
fi

INPUT_FILE_NO_EXT="${INPUT_FILE%.scm}"
OUTPUT_FILE_BASE="$INPUT_FILE_NO_EXT.${SYSTEM}.V${VERSION_LIMIT}.O${OPTIM_LEVEL}.$SAFETY_MODE"
OUTPUT_FILE_C="$INPUT_FILE_NO_EXT.c"
OUTPUT_FILE_EXE="$OUTPUT_FILE_BASE.exe"
OUTPUT_FILE_CFG_DOT="$OUTPUT_FILE_BASE.cfg"

run_dot()
{
  if command -v dot > /dev/null 2>&1 ; then
    dot -O -Tpdf $1
  else
    echo "*** dot program not found" >&2
  fi
}

run_pdfviewer()
{
  if command -v okular > /dev/null 2>&1 ; then
    okular $1
  else
    if command -v open > /dev/null 2>&1 ; then
      open $1
    else
      echo "*** PDF viewer program not found" >&2
    fi
  fi
}

case "$SYSTEM" in
  gambit)
    # Set base compiler command
    if [ "$USE_IGSC" = "1" ]; then
      GAMBITCOMP="$COMPILER_DIR/gsi/gsi -:dar,=$COMPILER_DIR $COMPILER_DIR/gsc/igsc"
    else
      GAMBITCOMP="$COMPILER_DIR/gsc/gsc -:=$COMPILER_DIR"
    fi

    # Set optimization level
    if [ "$OPTIM_LEVEL" = "0" ]; then
      INLINING_LIMIT=0
    else
      INLINING_LIMIT=370
    fi

    PRELUDE="(declare
               (version-limit $VERSION_LIMIT)
               (inlining-limit $INLINING_LIMIT))
             (define-macro (%%%)
               (eval '(define arithmetic '$ARITHMETIC))
               #f)
             (%%%)
             (##include \"$SCRIPT_DIR/gambit/bbv.scm\")"

    FLAGS="-keep-temp -gvm"

    if [ "$GENERATE_CFG" = "1" ]; then
      FLAGS="$FLAGS -cfg"
    fi

    if [ "$PRIMITIVE_COUNT" = "1" ]; then
      PRELUDE="$PRELUDE
               (##include \"$SCRIPT_DIR/gambit/lib.scm\")"
      POSTLUDE="(##include \"$SCRIPT_DIR/gambit/main.scm\")"
      $GAMBITCOMP -prelude "$PRELUDE" -postlude "$POSTLUDE" $FLAGS -gvm-interpret $INPUT_FILE
    else
      # Compilation
      $GAMBITCOMP -prelude "$PRELUDE" $FLAGS -c $INPUT_FILE
      $GAMBITCOMP -prelude "$PRELUDE" -c -o $SCRIPT_DIR/gambit/lib.c $SCRIPT_DIR/gambit/lib.scm
      $GAMBITCOMP -prelude "$PRELUDE" -c -o $SCRIPT_DIR/gambit/main.c $SCRIPT_DIR/gambit/main.scm
      $GAMBITCOMP -exe -o $OUTPUT_FILE_EXE $SCRIPT_DIR/gambit/lib.c $OUTPUT_FILE_C $SCRIPT_DIR/gambit/main.c
    fi

    if [ "$GENERATE_CFG" = "1" ]; then
      mv $INPUT_FILE_NO_EXT.cfg $OUTPUT_FILE_CFG_DOT
    fi
    ;;

  bigloo)
    BIGLOOCOMP="$COMPILER_DIR/bin/bigloo"
    BGLCFG="$COMPILER_DIR/bin/bglcfg"

    PATH="$COMPILER_DIR/bin:$PATH"

    BIGLOO_OPTIONS="-srfi arithmetic$ARITHMETIC -w -unsafe -saw -o $OUTPUT_FILE_EXE"
    BIGLOOBBVVLENGTH=false
    BIGLOOBBVVERSIONLIMIT=

    if [ "$OPTIM_LEVEL" = "0" ]; then
      BIGLOO_OPTIONS="$BIGLOO_OPTIONS -O2 -fno-user-inlining"
    else
      BIGLOO_OPTIONS="$BIGLOO_OPTIONS -Obench"
    fi
    if [ "$PRIMITIVE_COUNT" = "1" ]; then
      BIGLOO_OPTIONS="$BIGLOO_OPTIONS -copt -DSAW_BBV_STATS=1"
    fi
    if [ "$VERSION_LIMIT" = "0" ]; then
      BIGLOO_OPTIONS="$BIGLOO_OPTIONS -fno-saw-bbv"
    else
      BIGLOO_OPTIONS="$BIGLOO_OPTIONS -fsaw-bbv"
      BIGLOOBBVVLENGTH=true
      BIGLOOBBVVERSIONLIMIT=$VERSION_LIMIT
    fi

    # Compilation
    (cd $SCRIPT_DIR/bigloo && \
     BIGLOOBBVVLENGTH=$BIGLOOBBVVLENGTH \
     BIGLOOBBVVERSIONLIMIT=$BIGLOOBBVVERSIONLIMIT \
     $BIGLOOCOMP $BIGLOO_OPTIONS bbv.bgl $INPUT_FILE)

    if [ -f $OUTPUT_FILE_BASE-program.bbv.cfg ]; then
      (cd $SCRIPT_DIR/bigloo && $BGLCFG $OUTPUT_FILE_BASE-program.bbv.cfg > OUTPUT_FILE_CFG_DOT)
    fi
    ;;

esac

echo "***executable: $OUTPUT_FILE_EXE"

if [ "$GENERATE_CFG" = "1" ]; then
  run_dot $OUTPUT_FILE_CFG_DOT
fi

if [ "$VIEW_CFG" = "1" ] ; then
  run_pdfviewer $OUTPUT_FILE_CFG_DOT.pdf
fi

