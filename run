#!/bin/sh

# usage:
#
#  For gambit:
#
#    ./run --gambit --view tests/recursive/fib.scm
#    time ./tests/recursive/fib.gambit.0G4.exe
#
#  For bigloo:
#
#    ./run --bigloo --view tests/recursive/fib.scm
#    time ./tests/recursive/fib.bigloo.0G4.exe


# find script directory
SCRIPT_DIR="$0"
if test "${SCRIPT_DIR#/}" = "$SCRIPT_DIR" ; then
  SCRIPT_DIR="$(pwd)/$SCRIPT_DIR"
fi
SCRIPT_DIR="${SCRIPT_DIR%/*}"
SCRIPT_DIR="${SCRIPT_DIR%/.}"


# default settings:

SYSTEM=gambit
VIEW=no
TESTS=""          # empty to run all tests in tests directory

ARITHMETIC=G      # generic (G) or specialized (S) arithmetic?
VERSION_LIMIT=4   # version limit (0 to disable BBV)
INLINING_LIMIT=0  # 0 for no function inlining
PRIMITIVE_COUNT=0 # enables primitive (0 to disable)

# for gambit
if test "$WIPGAMBITDIR" != "" ; then
  GAMBITCOMP="$WIPGAMBITDIR/gsi/gsi -:=$WIPGAMBITDIR,drR $WIPGAMBITDIR/gsc/igsc.scm"
else
  GAMBITDIR="$SCRIPT_DIR/gambit/gambit"
  GAMBITCOMP="$GAMBITDIR/gsi/gsi -:=$GAMBITDIR,drR $GAMBITDIR/gsc/igsc.scm"
fi

# for bigloo
BIGLOODIR="$SCRIPT_DIR/bigloo/local"
BIGLOOCOMP="$BIGLOODIR/bin/bigloo"
BGLCFG="$BIGLOODIR/bin/bglcfg"

while [ "$#" != "0" ]; do
  case "$1" in
    -g|--gambit) # system
      SYSTEM=gambit
      ;;
    -b|--bigloo) # system
      SYSTEM=bigloo
      ;;
    -G) # generic arithmetic
      ARITHMETIC=G
      ;;
    -S) # specialized arithmetic when fixnum/flonum operations are possible
      ARITHMETIC=S
      ;;
    -V) # version limit
      shift
      if [ "$#" = "0" ]; then
        printf "version limit (-V) option needs an argument"
        exit 1
      fi
      VERSION_LIMIT="$1"
      ;;
    -I) # inlining limit
      shift
      if [ "$#" = "0" ]; then
        printf "inlining limit (-I) option needs an argument"
        exit 1
      fi
      INLINING_LIMIT="$1"
      ;;
    -P) # primitive counts
      PRIMITIVE_COUNT=1
      ;;
    -c|--clean) # clean
      rm -f tests/*/*.cfg tests/*/*.cfg.pdf tests/*/*.gvm tests/*/*.o* tests/*/*~ tests/*/*.bbv.dot tests/*/*.exe
      exit
      ;;
    -v|--view) # view CFG
      VIEW=yes
      ;;
    -*) # other options
      printf "*** unknown option: $1\n"
      exit 1
      ;;
    *)
      TESTS="$TESTS $1"
      ;;
  esac
  shift
done

run_dot()
{
  if command -v dot > /dev/null 2>&1 ; then
    dot -O -Tpdf $1
  else
    printf "dot program not found!\n"
  fi
}

run_pdfviewer()
{
  if command -v okular > /dev/null 2>&1 ; then
    okular $1
  else
    if command -v open > /dev/null 2>&1 ; then
      open $1
    else
      printf "PDF viewer program not found!\n"
    fi
  fi
}

if test "$TESTS" = "" ; then
  TESTS="tests"
fi

FILES=""

add_file()
{
  file="$1"
  if test "${file#*.scm}" != "$file" -a "${file#*.gambit.scm}" = "$file" -a "${file#*.bigloo.scm}" = "$file" ; then
    if test "${file#/}" = "$file" ; then
      file="$(pwd)/$file"
    fi
    FILES="$FILES $file"
  fi
}

for test in $TESTS ; do
  if test -d $test ; then
    for file in $(find $test -name "*.scm") ; do
      add_file "$file"
    done
  else
    add_file "$test"
  fi
done

for file in $FILES ; do

  filenoext="${file%.scm}"

  printf "=========== $SYSTEM ${file}\n"

  case "$SYSTEM" in

    gambit)
      DECL="(declare (version-limit $VERSION_LIMIT) (inlining-limit $INLINING_LIMIT) (standard-bindings) (extended-bindings) (not safe) (block)) (define-macro (%%%) (eval '(define arithmetic '$ARITHMETIC))) (%%%) (define-macro (npnull? x) (quasiquote (let ((x ,x)) (and (not (##pair? x)) (##null? x)))))"
      base="$filenoext.gambit.$INLINING_LIMIT$ARITHMETIC$VERSION_LIMIT"
      exe=$base.exe
      $GAMBITCOMP -prelude "$DECL (##include \"$SCRIPT_DIR/gambit/bbv.scm\")" -postlude "(load \"$SCRIPT_DIR/gambit/main.scm\")" -keep-temp -gvm -cfg $PRIMITIVE_COUNT_FLAG -exe -o $exe $file
      if [ "$PRIMITIVE_COUNT" -eq "1" ]; then
        $GAMBITCOMP -prelude "$DECL (##include \"$SCRIPT_DIR/gambit/bbv.scm\")" -postlude "(run)" -gvm-interpret $file
      fi
      mv $filenoext.cfg $base.cfg
      run_dot $base.cfg
      CFGPDF=$base.cfg.pdf
      ANALYSISEXT=.gvm
      ;;

    bigloo)
      base="$filenoext.bigloo.$INLINING_LIMIT$ARITHMETIC$VERSION_LIMIT"
      exe=$base.exe
      if [ "$PRIMITIVE_COUNT" -eq "1" ]; then
        echo "ERROR: primitive count not supported for bigloo"
        exit 1
      fi
      PATH="$BIGLOODIR/bin:$PATH"
      SAWBBV=-fsaw-bbv
      if [ "$VERSION_LIMIT " = "1 " ]; then
	SAWBBV=
      fi
      (cd $SCRIPT_DIR/bigloo && \
	 $BIGLOOCOMP -O3 -t1 -srfi arithmetic$ARITHMETIC bbv.bgl $file -saw -fsaw-bbv -o $exe)

      if [ -f $SCRIPT_DIR/bigloo/$base-program.bbv.cfg ]; then
        (cd $SCRIPT_DIR/bigloo && \
	   $BGLCFG $base-program.bbv.cfg > $base.dot && \
	   run_dot $base-program.bbv.dot)
	CFGPDF=$base-program.bbv.dot.pdf
	ANALYSISEXT=-program.bbv.cfg
      fi
      ;;

  esac

  echo "***executable: $exe"

  if test "$ANALYSISEXT" != "" && fgrep ";; $ANALYSISEXT contains: " $file > /dev/null 2>&1 ; then

    fgrep ";; $ANALYSISEXT contains: " $file | sed -e "s/^;; $ANALYSISEXT contains: //" | while IFS= read -r pattern ; do

      nboccur=$(grep -e "$pattern" $base$ANALYSISEXT | wc -l | sed -e "s/^ *//")

      case "$nboccur" in
        1) printf "SUCCESS -- $base$ANALYSISEXT contains: $pattern\n"
           ;;
        0) printf "FAIL -- pattern not found in $base$ANALYSISEXT: $pattern\n"
           ;;
        *) printf "FAIL -- pattern found $nboccur times in $base$ANALYSISEXT: $pattern\n"
           ;;
      esac

    done

  fi

  if test "$VIEW" = "yes" ; then
    run_pdfviewer $CFGPDF
  fi

done
